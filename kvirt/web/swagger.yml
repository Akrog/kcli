openapi: 3.0.0
info:
  version: 1.0.0
  title: Kcli web API
  description: Kcli web API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
components:
  schemas:
    Result:
      type: object
      properties:
        result:
          type: string
        reason:
          type: string
      example:
          result: success
paths:
  /hoststable:
    get:
      description: Returns list of hosts
      responses:
        '200':
          description: Successfully returned list of hosts
          content:
            application/json:
              schema:
                type: object 
                properties:
                  clients:
                    type: array
                    items:
                      type: string
  /vmstable:
    get:
      description: Returns list of vms
      responses:
        '200':
          description: Successfully returned list of vms
          content:
            application/json:
              schema:
                type: object 
                properties:
                  vms:
                    type: array
                    items:
                      type: string
  /vmprofilestable:
    get:
      description: Returns list of profiles
      responses:
        '200':
          description: Successfully returned list of profiles
          content:
            application/json:
              schema:
                type: object 
                properties:
                  profiles:
                    type: array
                    items:
                      type: string
  /containerstable:
    get:
      description: Returns list of containers
      responses:
        '200':
          description: Successfully returned list of containers
          content:
            application/json:
              schema:
                type: object 
                properties:
                  containers:
                    type: array
                    items:
                      type: string
  /containerprofilestable:
    get:
      description: Returns list of container profiles
      responses:
        '200':
          description: Successfully returned list of containers
          content:
            application/json:
              schema:
                type: object 
                properties:
                  profiles:
                    type: array
                    items:
                      type: string
  /imagestable:
    get:
      description: Returns list of images
      responses:
        '200':
          description: Successfully returned list of images
          content:
            application/json:
              schema:
                type: object 
                properties:
                  images:
                    type: array
                    items:
                      type: string
  /isostable:
    get:
      description: Returns list of isos
      responses:
        '200':
          description: Successfully returned list of isos
          content:
            application/json:
              schema:
                type: object 
                properties:
                  isos:
                    type: array
                    items:
                      type: string
  /networkstable:
    get:
      description: Returns list of networks
      responses:
        '200':
          description: Successfully returned list of networks
          content:
            application/json:
              schema:
                type: object 
                properties:
                  networks:
                    type: array
                    items:
                      type: string
  /plansstable:
    get:
      description: Returns list of plans
      responses:
        '200':
          description: Successfully returned list of plans
          content:
            application/json:
              schema:
                type: object 
                properties:
                  plans:
                    type: array
                    items:
                      type: string
  /kubestable:
    get:
      description: Returns list of kubes
      responses:
        '200':
          description: Successfully returned list of kubes
          content:
            application/json:
              schema:
                type: object 
                properties:
                  kubes:
                    type: array
                    items:
                      type: string
  /poolstable:
    get:
      description: Returns list of pools
      responses:
        '200':
          description: Successfully returned list of pools
          content:
            application/json:
              schema:
                type: object 
                properties:
                  pools:
                    type: array
                    items:
                      type: string
  /repostable:
    get:
      description: Returns list of repos
      responses:
        '200':
          description: Successfully returned list of repos
          content:
            application/json:
              schema:
                type: object 
                properties:
                  repos:
                    type: array
                    items:
                      type: string
  /productstable:
    get:
      description: Returns list of products
      responses:
        '200':
          description: Successfully returned list of products
          content:
            application/json:
              schema:
                type: object 
                properties:
                  products:
                    type: array
                    items:
                      type: string
  /containeraction:
    post:
      description: start/stop/delete/create container
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [create, delete, start, stop]
                name:
                  type: string
                profile:
                  type: string
      responses:
        '200':
          description: Successfully handled container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                result: failure
                reason: Invalid data
  /diskaction:
    post:
      description: add/delete disk to vm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [create, delete]
                name:
                  type: string
                size:
                  type: integer
                pool:
                  type: string
                disk:
                  type: string
      responses:
        '200':
          description: Successfully handled disk
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                result: failure
                reason: Invalid data
  /imagesaction:
    post:
      description: create/delete image
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [create]
                image:
                  type: string
                pool:
                  type: string
                url:
                  type: string
                cmd:
                  type: string
      responses:
        '200':
          description: Successfully handled container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                result: failure
                reason: Invalid data
  /nicaction:
    post:
      description: add/delete nic to vm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [create, delete]
                name:
                  type: string
                network:
                  type: string
                nic:
                  type: string
      responses:
        '200':
          description: Successfully handled nic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                result: failure
                reason: Invalid data
  /poolaction:
    post:
      description: create/delete pool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [create, delete]
                pool:
                  type: string
                type:
                  type: string
      responses:
        '200':
          description: Successfully handled pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                result: failure
                reason: Invalid data
  /repoaction:
    post:
      description: create/delete/update repo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [create, delete, update]
                repo:
                  type: string
                url:
                  type: string
      responses:
        '200':
          description: Successfully handled repo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                result: failure
                reason: Invalid data
  /networkaction:
    post:
      description: create/delete network
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [create, delete]
                network:
                  type: string
                cidr:
                  type: string
                dhcp:
                  type: boolean
                isolated:
                  type: boolean
      responses:
        '200':
          description: Successfully handled pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                result: failure
                reason: Invalid data
  /vmaction:
    post:
      description: start/stop/delete/create vm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [create, delete, start, stop]
                name:
                  type: string
                profile:
                  type: string
                parameters:
                  type: object
      responses:
        '200':
          description: Successfully handled vm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                result: failure
                reason: Invalid data
  /hostaction:
    post:
      description: enable/disable/default host
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [enable, disable, switch]
                name:
                  type: string
      responses:
        '200':
          description: Successfully handled host
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                result: failure
                reason: Invalid data
  /snapshotaction:
    post:
      description: create/delete/revert snapshot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [list, revert, delete, create]
                name:
                  type: string
      responses:
        '200':
          description: Successfully handled host
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  /planaction:
    post:
      description: start/stop/delete plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [start, stop, delete, create]
                name:
                  type: string
      responses:
        '200':
          description: Successfully handled plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                result: failure
                reason: Invalid data
  /productction:
    post:
      description: create product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [create]
                product:
                  type: string
      responses:
        '200':
          description: Successfully created product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                result: failure
                reason: Invalid data
  /kubecreate:
    post:
      description: create kube
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cluster:
                  type: string
                type:
                  type: string
                  enum: [generic, openshift, k3s, microshift, hypershift, kind]
                parameters:
                  type: string
      responses:
        '200':
          description: Successfully created kube
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                result: failure
                reason: Invalid data
